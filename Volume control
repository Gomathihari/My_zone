import cv2
import mediapipe as mp
import os
import numpy as np

mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands

# Initialize hand tracking
hands = mp_hands.Hands(max_num_hands=1, min_detection_confidence=0.5)

def calculate_angle(a, b, c):
    """Calculate the angle between three points (in radians)."""
    radians = abs(np.arctan2(c[1]-b[1], c[0]-b[0]) - np.arctan2(a[1]-b[1], a[0]-b[0]))
    return np.degrees(radians)

def set_system_volume(angle):
    """Set the system volume based on the finger angle."""
    max_angle = 180.0  # Maximum angle between fingers
    max_volume = 150.0  # Maximum volume level

    volume = int((angle / max_angle) * max_volume)
    os.system(f"pactl set-sink-volume @DEFAULT_SINK@ {volume}%")

cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Convert the frame to RGB
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(frame_rgb)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Get landmarks for thumb, index, and middle fingers
            thumb = hand_landmarks.landmark[4]
            index = hand_landmarks.landmark[8]
            middle = hand_landmarks.landmark[12]

            # Calculate the angle between thumb, index, and middle fingers
            thumb_coords = (thumb.x, thumb.y)
            index_coords = (index.x, index.y)
            middle_coords = (middle.x, middle.y)
            finger_angle = calculate_angle(thumb_coords, index_coords, middle_coords)

            # Set the system volume based on the finger angle
            set_system_volume(finger_angle)

            # Draw hand landmarks and connections
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

    cv2.imshow('Hand Tracking', frame)
    if cv2.waitKey(10) & 0xFF == ord('q'):
        break

hands.close()
cap.release()
cv2.destroyAllWindows(
